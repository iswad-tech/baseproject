services:
  nginx:
    restart: always
    build:
      dockerfile: Dockerfile.prod
      context: ./nginx
      args:
        APP_URL: ${APP_URL}
    ports:
      - "80:80"
    volumes:
      - static-data:/vol/static
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/htpasswd:/etc/nginx/.htpasswd
    depends_on:
      - client
      - api
      - channels
      - celery-flower

  client:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./client
    command: npm start
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api

  api:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./api
    env_file:
      - ./config/envFiles/django/prod/.env
    command: ./docker-entrypoint-prod.sh
    volumes:
      - static-data:/usr/src/app/vol
    depends_on:
      - db
      - pgbouncer

  celery:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./api
    env_file:
      - ./config/envFiles/django/prod/.env
    volumes:
      - static-data:/usr/src/app/vol
    command: celery -A config worker -l info
    depends_on:
      - db
      - pgbouncer
      - redis

  celery-beat:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./api
    env_file:
      - ./config/envFiles/django/prod/.env
    volumes:
      - static-data:/usr/src/app/vol
    command: celery -A config beat -l info
    depends_on:
      - db
      - pgbouncer
      - redis

  celery-flower:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./api
    env_file:
      - ./config/envFiles/django/prod/.env
    volumes:
      - static-data:/usr/src/app/vol
    command: celery -A config flower --url_prefix=/flower --basic_auth=${CELERY_FLOWER_USER}:${CELERY_FLOWER_PASSWORD}
    depends_on:
      - db
      - pgbouncer
      - redis

  channels:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./api
    env_file:
      - ./config/envFiles/django/prod/.env
    command: daphne -b 0.0.0.0 -p 8001 config.asgi:application
    depends_on:
      - db
      - pgbouncer
      - redis

  db:
    restart: always
    image: postgres:13-alpine
    env_file:
      - ./config/envFiles/postgres/prod/.env
    ports:
      - "${SERVER_PORT}:${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db_backups:/db_backups

  pgbouncer:
    image: edoburu/pgbouncer:v1.23.1-p2
    ports:
      - "6432:6432"
    env_file:
      - ./config/envFiles/pgbouncer/prod/.env
    depends_on:
      - db

  redis:
    image: redis:7.0.4-alpine3.16
    restart: always
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_celery_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-cache:
    image: redis:7.0.4-alpine3.16
    restart: always
    volumes:
      - ./redis-cache/redis-sample.conf:/usr/local/etc/redis/redis.conf
      - redis_cache_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf

volumes:
  pgdata:
  static-data:
  redis_cache_data:
  redis_celery_data:
